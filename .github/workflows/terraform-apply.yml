name: 'Infra â€” Terraform apply & bootstrap'

on:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  terraform-apply:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'

      - name: Export AWS credentials to environment (temporary workaround)
        # NOTE: Temporary workaround to avoid sts endpoint/network issues observed with
        # aws-actions/configure-aws-credentials on hosted runners. This step exports
        # the static secrets into the job environment so Terraform and aws CLI can use
        # them directly. After provisioning completes, remove static secrets and
        # restore the `aws-actions/configure-aws-credentials` step or OIDC flow.
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV

      - name: Terraform init
        working-directory: infra/terraform
        run: terraform init -input=false

      - name: Terraform apply (create EKS)
        working-directory: infra/terraform
        run: terraform apply -auto-approve

      - name: Terraform outputs
        id: tfoutputs
        working-directory: infra/terraform
        run: |
          terraform output -raw cluster_name > cluster_name.txt || true
          terraform output -raw cluster_endpoint > cluster_endpoint.txt || true
          echo "cluster_name=$(cat cluster_name.txt)" >> $GITHUB_OUTPUT

      - name: Install kubectl and helm
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ steps.tfoutputs.outputs.cluster_name }} --region ${{ secrets.AWS_REGION }}

      - name: Install cert-manager (Helm)
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm upgrade --install cert-manager jetstack/cert-manager --namespace cert-manager --create-namespace --version v1.11.0 --set installCRDs=true

      - name: Install ingress-nginx (Helm)
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx --namespace ingress-nginx --create-namespace --set controller.replicaCount=1 --set controller.service.type=LoadBalancer

      - name: Wait for ingress LoadBalancer IP
        run: |
          echo "Waiting up to 5 minutes for ingress-nginx LoadBalancer external IP/hostname..."
          for i in {1..30}; do
            LB_IP=$(kubectl -n ingress-nginx get svc -l app.kubernetes.io/component=controller -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            LB_HOST=$(kubectl -n ingress-nginx get svc -l app.kubernetes.io/component=controller -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
            if [ -n "$LB_IP" ] || [ -n "$LB_HOST" ]; then
              echo "Found LoadBalancer: $LB_IP $LB_HOST"
              echo "external_ip_or_hostname=$LB_IP$LB_HOST" >> $GITHUB_OUTPUT
              break
            fi
            sleep 10
          done
          if [ -z "$LB_IP" ] && [ -z "$LB_HOST" ]; then
            echo "WARNING: LoadBalancer external IP/hostname not found after waiting. You will need to check the service manually: kubectl -n ingress-nginx get svc"
          fi

      - name: Apply cert-manager ClusterIssuer (HTTP-01)
        run: |
          kubectl apply -f infra/cert-manager/cluster-issuer-http01.yaml || true

      - name: Apply ArgoCD Ingress
        run: |
          kubectl apply -f infra/k8s/argocd-ingress.yaml || true

      - name: Install ArgoCD (Helm, minimal)
        run: |
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update
          # Install ArgoCD with a ClusterIP service (no LB) to minimize cloud resources.
          helm upgrade --install argocd argo/argo-cd --namespace argocd --create-namespace \
            --set server.service.type=ClusterIP \
            --set controller.replicas=1

      - name: Wait for ArgoCD server
        run: |
          kubectl -n argocd rollout status deployment argocd-server --timeout=3m || true

      - name: Apply ArgoCD Application (register repo)
        run: |
          kubectl apply -f infra/argocd/argocd-application.yaml || true

      - name: Output summary
        run: |
          echo "EKS cluster created: ${{ steps.tfoutputs.outputs.cluster_name }}"
          echo "ArgoCD installed in namespace: argocd"
